from datetime import datetime
from typing import Optional

from aiogram import Bot, types
from sqlalchemy.orm import Session

from backend.database.models import TelegramRole, TelegramAccount, ClientRequest, ClientRequestStatus, ChatMessage, \
    SenderRole


class TgFuncs:
    def register_telegram_account(
            self,
            db: Session,
            tg_id: int,
            role: TelegramRole,
            crm_user_id: Optional[int] = None,
    ) -> TelegramAccount:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è TelegramAccount (client –∏–ª–∏ sales) –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π.
        """
        existing = db.query(TelegramAccount).filter(
            TelegramAccount.telegram_id == tg_id
        ).first()
        if existing:
            return existing

        new_acc = TelegramAccount(
            telegram_id=tg_id, role=role, crm_user_id=crm_user_id
        )
        db.add(new_acc)
        db.commit()
        db.refresh(new_acc)
        return new_acc

    def create_client_request(self, db: Session, client_tg_id: int) -> ClientRequest:
        """
        –°–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –æ –∑–∞–ø—Ä–æ—Å–µ –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–∞–∂–∞—Ç–∏–µ ¬´–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–æ–º¬ª).
        """
        req = ClientRequest(client_tg_id=client_tg_id, status=ClientRequestStatus.new)
        db.add(req)
        db.commit()
        db.refresh(req)
        return req

    def take_client_request(
            self, db: Session, request_id: int, sales_tg_id: int
    ) -> ClientRequest:
        """
        –ü–æ–º–µ—á–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞ –∫–∞–∫ –≤–∑—è—Ç—ã–π (status ‚Üí 'taken'), –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç Telegram ID –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞.
        """
        req = db.query(ClientRequest).filter(ClientRequest.id == request_id).first()
        if not req:
            return None
        req.status = ClientRequestStatus.taken
        req.taken_at = datetime.utcnow()
        req.sales_tg_id = sales_tg_id
        db.commit()
        db.refresh(req)
        return req

    def close_client_request(self, db: Session, request: ClientRequest) -> ClientRequest:
        """
        –ü–æ–º–µ—á–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞ –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç—ã–π (status ‚Üí 'closed').
        """
        request.status = ClientRequestStatus.closed
        request.closed_at = datetime.utcnow()
        db.commit()
        db.refresh(request)
        return request

    def save_chat_message(
            self,
            db: Session,
            lead_id: int,
            source: str,
            message_text: str,
            sender_id: int,
            sender_role: SenderRole,
    ) -> ChatMessage:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É ChatMessage (–Ω–æ–≤–∞—è –º–æ–¥–µ–ª—å).
        - lead_id       : ID –ª–∏–¥–∞ (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å -1)
        - source        : 'telegram' (–∏–ª–∏ –¥—Ä—É–≥–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫)
        - message_text  : —Å–∞–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        - sender_id     : Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        - sender_role   : SenderRole.CLIENT –∏–ª–∏ SenderRole.SALES
        """
        cm = ChatMessage(
            lead_id=lead_id if lead_id is not None else -1,
            source=source,
            text=message_text,
            sender_id=sender_id,
            sender_role=sender_role,
            is_from_sales=(sender_role == SenderRole.SALES),
            created_at=datetime.utcnow(),  # SQLAlchemy –ø–æ–¥—Å—Ç–∞–≤–∏—Ç —Å–∞–º, –Ω–æ —è–≤–Ω–æ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç
        )
        db.add(cm)
        db.commit()
        db.refresh(cm)
        return cm

    async def forward_to_sales(
            self, db: Session, bot: Bot, client_tg_id: int, text: str
    ) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞–º (role=TelegramRole.sales)
        –æ —Ç–æ–º, —á—Ç–æ –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç.
        """
        sales_list = (
            db.query(TelegramAccount)
            .filter(TelegramAccount.role == TelegramRole.sales)
            .all()
        )
        for sales_acc in sales_list:
            await bot.send_message(
                sales_acc.telegram_id,
                f"üîî –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤—è–∑—å:\n\n"
                f"‚Äî Client TG ID: {client_tg_id}\n"
                f"‚Äî –°–æ–æ–±—â–µ–Ω–∏–µ: {text}\n\n"
                f"–ß—Ç–æ–±—ã –≤–∑—è—Ç—å –∫–ª–∏–µ–Ω—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                reply_markup=self.generate_take_button_markup(client_tg_id),
            )

    def generate_take_button_markup(
            self, client_tg_id: int
    ) -> types.InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π ¬´–í–∑—è—Ç—å –∫–ª–∏–µ–Ω—Ç–∞¬ª.
        callback_data –±—É–¥–µ—Ç –≤–∏–¥–∞ \"take:<client_tg_id>\".
        """
        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

        kb = InlineKeyboardMarkup()
        kb.add(
            InlineKeyboardButton(
                text="ü§ù –í–∑—è—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data=f"take:{client_tg_id}"
            )
        )
        return kb

    def generate_client_menu(self) -> types.ReplyKeyboardMarkup:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ ¬´–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–æ–º¬ª.
        """
        from aiogram.types import KeyboardButton, ReplyKeyboardMarkup

        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–æ–º"))
        return kb

    def generate_sales_menu(self) -> types.ReplyKeyboardMarkup:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞ –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞:
        ¬´–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ –ª–∏–¥—É¬ª, ¬´–°–æ–∑–¥–∞—Ç—å –ª–∏–¥¬ª, ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä¬ª.
        """
        from aiogram.types import KeyboardButton, ReplyKeyboardMarkup

        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(
            KeyboardButton("–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ –ª–∏–¥—É"),
            KeyboardButton("–°–æ–∑–¥–∞—Ç—å –ª–∏–¥"),
        )
        kb.add(KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä"))
        return kb
