// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—ã–∑—ã–≤–∞–µ–º:


document.addEventListener('DOMContentLoaded', () => {
    // 1) –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–ª–∏–∫–∏ –∫–æ –≤—Å–µ–º –ñ–ö (–¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–ª–∞—Å—Å –≤ openComplexDetails, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç)
    document.querySelectorAll('.employee-item').forEach(item => {
        item.addEventListener('click', () => {
            const jkName = item.dataset.jk;
            openComplexDetails(jkName);
        });
    });
});

async function openComplexDetails(jkName) {
    const panel = document.getElementById('rightPanel');
    // 2) –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
    panel.classList.add('active');

    // 3) –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏–º—è –ñ–ö –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ / —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ
    document.getElementById('userId').value = jkName;
    document.querySelector('input[name="full_name"]').value = jkName;

    // (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –¥–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    // document.querySelector('.form-info-data .text-profile.gray').textContent = '–î–∞—Ç–∞: ' + someDate;

    try {
        // 4) –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        const resp = await fetch(`/excel/complexes/${encodeURIComponent(jkName)}/files`);
        if (!resp.ok) throw new Error(`${resp.status}`);
        const { files } = await resp.json();

        // 5) –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º
        const dataFiles = files.filter(f => /jk_data\.xlsx$/i.test(f));
        const priceFiles = files.filter(f => /price_shaxamtka\.xlsx$/i.test(f));
        const templateFiles = files.filter(f => /contract_template\.docx$/i.test(f));

        // 6) –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        const sections = panel.querySelectorAll('.upload-section .file-list');
        const [dataList, pricesList, templateList] = sections;

        // 7) –û—á–∏—â–∞–µ–º
        [dataList, pricesList, templateList].forEach(el => el.innerHTML = '');

        // 8) –§—É–Ω–∫—Ü–∏—è-—Ä–µ–Ω–¥–µ—Ä –¥–ª—è –æ–¥–Ω–æ–π —Å–µ–∫—Ü–∏–∏
        function renderFiles(listEl, arr) {
            if (arr.length === 0) {
                listEl.innerHTML = '<p style="color:#777;">–ù–µ—Ç —Ñ–∞–π–ª–æ–≤</p>';
                return;
            }
            arr.forEach(fname => {
                const pill = document.createElement('div');
                pill.className = 'file-pill';
                pill.innerHTML = `
            <span>${fname}</span>
            <div class="actions">
              <button type="button" class="edit"   title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
              <button type="button" class="delete" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
            </div>
          `;
                // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
                // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
                if (/jk_data\.xlsx$/i.test(fname)) {
                    // –î–ª—è —à–∞—Ö–º–∞—Ç–∫–∏ –≤—ã–∑—ã–≤–∞–µ–º —Å–≤–æ–π –º–æ–¥–∞–ª
                    pill.querySelector('.edit').addEventListener('click', () => openChessModal(jkName));
                } else {
                    pill.querySelector('.edit').addEventListener('click', () => {
                        // TODO: open editor –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤
                        alert(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ${fname}`);
                    });
                }
                pill.querySelector('.delete').addEventListener('click', () => {
                    // TODO: —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª —á–µ—Ä–µ–∑ API
                    if (confirm(`–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª ${fname}?`)) {
                        deleteComplexFile(jkName, fname, listEl, pill);
                    }
                });
                listEl.append(pill);
            });
        }

        // 9) –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞–∂–¥—É—é —Å–µ–∫—Ü–∏—é
        renderFiles(dataList, dataFiles);
        renderFiles(pricesList, priceFiles);
        renderFiles(templateList, templateFiles);

    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –ñ–ö:', err);
        panel.querySelectorAll('.upload-section .file-list')
            .forEach(el => el.innerHTML = '<p style="color:red;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</p>');
    }
}

async function loadComplexes() {
    try {
        const response = await fetch('/excel/complexes');
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        const data = await response.json();
        const complexes = data.complexes || [];

        const listEl = document.querySelector('.employee-list');
        listEl.innerHTML = ''; // –æ—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ

        complexes.forEach(jkName => {
            const item = document.createElement('div');
            item.className = 'employee-item';
            item.dataset.jk = jkName;
            item.innerHTML = `
          <div class="employee-name">
            ${jkName}
            <i class="fas fa-chevron-right"></i>
          </div>
        `;
            // –ö–ª–∏–∫ –ø–æ –∫–æ–º–ø–ª–µ–∫—Å—É ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
            item.addEventListener('click', () => openComplexDetails(jkName));
            listEl.append(item);
        });

        if (complexes.length === 0) {
            listEl.innerHTML = '<p>–ö–æ–º–ø–ª–µ–∫—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>';
        } else {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –ñ–ö
            const firstJk = complexes[0];
            openComplexDetails(firstJk);
            // –í—ã–¥–µ–ª–∏—Ç—å –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
            const firstItem = listEl.querySelector('.employee-item');
            if (firstItem) firstItem.classList.add('selected');
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ñ–ö:', err);
        document.querySelector('.employee-list').innerHTML =
            '<p style="color:red;">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–ª–µ–∫—Å–æ–≤.</p>';
    }
}



/**
* –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —à–∞—Ö–º–∞—Ç–∫—É –∏–∑ jk_data.xlsx –≤ –º–æ–¥–∞–ª–∫–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã
*/
async function openChessModal(jkName) {
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å JSON —à–∞—Ö–º–∞—Ç–∫–∏
    const resp = await fetch(`/excel/complexes/${encodeURIComponent(jkName)}/chess`);
    if (!resp.ok) return alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞—Ö–º–∞—Ç–∫—É");
    const { grid } = await resp.json();
    if (!grid.length) return alert("–î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç");
  
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏
    const headers     = Object.keys(grid[0]);
    const aptField    = headers.find(h => /–Ω–æ–º–µ—Ä\s*–ø–æ–º–µ—â–µ–Ω–∏/i.test(h));
    const statusField = headers.find(h => /—Å—Ç–∞—Ç—É—Å/i.test(h));
  
    // –°–æ–∑–¥–∞—ë–º –º–æ–¥–∞–ª–∫—É
    const modal = document.createElement("div");
    modal.className = "custom-modal";
    Object.assign(modal.style, {
      position: "fixed", inset: 0,
      background: "rgba(0,0,0,0.5)",
      display: "flex", alignItems: "center", justifyContent: "center",
      zIndex: 2000
    });
    const content = document.createElement("div");
    Object.assign(content.style, {
      width: "90%", maxWidth: "800px", maxHeight: "80vh", overflow: "auto",
      background: "#fff", padding: "20px", borderRadius: "8px"
    });
  
    // –°–æ–±–∏—Ä–∞–µ–º HTML —Ç–∞–±–ª–∏—Ü—ã
    let html = `<h3>–®–∞—Ö–º–∞—Ç–∫–∞ –ñ–ö ‚Äú${jkName}‚Äù</h3>`;
    html += `<table style="width:100%; border-collapse:collapse; text-align:center;">`;
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    html += "<thead><tr>";
    headers.forEach(h => {
      html += `<th style="border:1px solid #ccc; padding:6px;">${h}</th>`;
    });
    html += "</tr></thead><tbody>";
    // –î–∞–Ω–Ω—ã–µ
    grid.forEach((rowObj, rowIdx) => {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å—Ç–∞—Ç—É—Å—É
      const statusValue = String(rowObj[statusField]).toLowerCase().trim();
      let bgColor = '';
      if (statusValue === '—Å–≤–æ–±–æ–¥–Ω–∞') {
          bgColor = '#e0f8e0'; // —Å–≤–µ—Ç–ª–æ-–∑–µ–ª—ë–Ω—ã–π
      } else if (statusValue === '–ø—Ä–æ–¥–∞–Ω–∞') {
          bgColor = '#f8e0e0'; // —Å–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π
      } else if (statusValue === '–±—Ä–æ–Ω—å') {
          bgColor = '#f8f4e0'; // —Å–≤–µ—Ç–ª–æ-–∂—ë–ª—Ç—ã–π
      }
      html += `<tr style="background-color: ${bgColor}">`;
      headers.forEach(col => {
        const val = rowObj[col] ?? "";
        
        if (col === statusField) {
            statusLower = val.toLowerCase().trim();
          html += `<td style="border:1px solid #ccc; padding:4px;">
            <select data-row="${rowIdx}">
              <option${statusLower==="—Å–≤–æ–±–æ–¥–Ω–∞"?" selected":""}>–°–≤–æ–±–æ–¥–Ω–æ</option>
              <option${statusLower==="–ø—Ä–æ–¥–∞–Ω–∞"  ?" selected":""}>–ü—Ä–æ–¥–∞–Ω–∞</option>
              <option${statusLower==="–±—Ä–æ–Ω—å"    ?" selected":""}>–ë—Ä–æ–Ω—å</option>
            </select>
          </td>`;
        } else {
          html += `<td style="border:1px solid #ccc; padding:6px;">${val}</td>`;
        }
      });
      html += "</tr>";
    });
    html += "</tbody></table>";
    // –ö–Ω–æ–ø–∫–∏
    html += `
      <div style="text-align:right; margin-top:12px;">
        <button id="saveChessBtn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
        <button id="closeChessBtn" style="margin-left:8px;">–ó–∞–∫—Ä—ã—Ç—å</button>
      </div>
    `;
  
    content.innerHTML = html;
    modal.appendChild(content);
    document.body.appendChild(modal);
  
    // –ó–∞–∫—Ä—ã—Ç—å
    document.getElementById("closeChessBtn").onclick = () => modal.remove();
  
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
    document.getElementById("saveChessBtn").onclick = async () => {
        const selects = content.querySelectorAll("select[data-row]");
        const updates = Array.from(selects).map(sel => {
          const rowIdx = +sel.dataset.row;
          return {
            apt:     String(grid[rowIdx][aptField]),  // –Ω–æ–º–µ—Ä –ø–æ–º–µ—â–µ–Ω–∏—è –∏–∑ grid
            status: sel.value
          };
        });
      
        // ---- –î–µ–±–∞–≥ ----
        console.log("aptField:", aptField);
        console.log("updates array:", updates);
        console.log("payload JSON:", JSON.stringify({ updates }));
      
        try {
          const saveResp = await fetch(
            `/excel/complexes/${encodeURIComponent(jkName)}/chess`, {
              method: "PUT",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ updates })
            }
          );
          if (!saveResp.ok) {
            const errBody = await saveResp.text();
            console.error("Server responded 422 with body:", errBody);
            throw new Error(saveResp.status);
          }
          alert("–°—Ç–∞—Ç—É—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");
          modal.remove();
        } catch (e) {
          alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: " + e);
        }
      };
  }
// –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ:
document.addEventListener('DOMContentLoaded', loadComplexes);